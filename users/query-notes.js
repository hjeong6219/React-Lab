[{"content":"import { render, screen } from '@testing-library/react';\r\n\r\nfunction ColorList() {\r\n  return (\r\n    <ul>\r\n      <li>Red</li>\r\n      <li>Blue</li>\r\n      <li>Green</li>\r\n    </ul>\r\n  );\r\n}\r\n\r\nrender(<ColorList />);\r\n","type":"code","id":"k8mlu"},{"content":"test('getBy, queryBy, findBy, finding 0 elements', async () => {\r\n  render(<ColorList />);\r\n  expect(\r\n    () => screen.getByRole('textbox')\r\n  ).toThrow();\r\n\r\n  expect(screen.queryByRole('textbox')).toEqual(null)\r\n\r\n  let errorThrown = false;\r\n  try {\r\n    await screen.findByRole('textbox')\r\n  } catch (err) {\r\n    errorThrown == true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n});","type":"code","id":"h364m"},{"content":"test('getBy, queryBy, findBy when they find 1 element', async () => {\r\n  render(<ColorList />);\r\n\r\n  expect(\r\n    screen.getByRole('list')\r\n  ).toBeInTheDocument();\r\n  expect(\r\n    screen.queryByRole('list')\r\n  ).toBeInTheDocument()\r\n  expect(\r\n    await screen.findByRole('list')\r\n  ).toBeInTheDocument()\r\n  \r\n});","type":"code","id":"c7n6i"},{"content":"test('getBy, queryBy, findBy when they find > 1 element', async () => {\r\n  render(<ColorList />);\r\n  expect(\r\n    () => screen.getByRole('listitem')\r\n  ).toThrow();\r\n\r\n  expect(\r\n    () => screen.queryByRole('listitem')\r\n  ).toThrow()\r\n\r\n  let errorThrown = false;\r\n  try {\r\n    await screen.findByRole('listitem')\r\n  } catch (err) {\r\n    errorThrown == true;\r\n  }\r\n  expect(errorThrown).toEqual(true);\r\n});","type":"code","id":"uz4tv"},{"content":"test('getAllBy, queryAllBy, findAllBy', async () => {\r\n  render(<ColorList />);\r\n  expect(\r\n    screen.getAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n\r\n  expect(\r\n    screen.queryAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n\r\n  expect(\r\n    await screen.findAllByRole('listitem')\r\n  ).toHaveLength(3);\r\n});","type":"code","id":"x43ie"},{"content":"test('favor using getBy to prove an element exists', () => {\r\n  render(<ColorList />)\r\n\r\n  const element = screen.getByRole('list')\r\n\r\n  expect(element).toBeInTheDocument();\r\n})","type":"code","id":"ix6a1"},{"content":"test('favor queryBy to prove an element does not exist', () => {\r\n  render(<ColorList />)\r\n\r\n  const element = screen.queryByRole('textbox')\r\n\r\n  expect(element).not.toBeInTheDocument();\r\n})","type":"code","id":"t8i1l"},{"content":"import { useState, useEffect } from 'react';\r\n\r\nfunction fakeFetchColors() {\r\n  return Promise.resolve(\r\n    ['red', 'green', 'blue']\r\n  );\r\n}\r\n\r\nfunction LoadableColorList() {\r\n  const [colors, setColors] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fakeFetchColors()\r\n      .then(c => setColors(c));\r\n  }, []);\r\n\r\n  const renderedColors = colors.map(color => {\r\n    return <li key={color}>{color}</li>\r\n  });\r\n  \r\n  return <ul>{renderedColors}</ul>\r\n}\r\n\r\nrender(<LoadableColorList />)\r\n\r\n","type":"code","id":"38tat"},{"content":"test('Favor findBy or findAllBy when data fetching', async () => {\r\n  render(<LoadableColorList />)\r\n\r\n  const els = await screen.findAllByRole('listitem');\r\n\r\n  expect(els).toHaveLength(3)\r\n})","type":"code","id":"h46zu"}]